spring.datasource.url = jdbc:mysql://localhost:3306/student?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.hibernate.ddl-auto=create-drop
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql: true


#NOTES:
#Tell me the difference between these two ,
#spring.jpa.hibernate.ddl-auto=create-drop
#spring.jpa.hibernate.ddl-auto=update
#
#The two configurations spring.jpa.hibernate.ddl-auto=create-drop and spring.jpa.hibernate.ddl-auto=update are related to the behavior of Hibernate's schema generation when working with a relational database.
#
#spring.jpa.hibernate.ddl-auto=create-drop: This configuration tells Hibernate to automatically create the database schema when the application starts and drop it when the application shuts down. It means that Hibernate will generate the necessary SQL statements to create the database schema based on your entity mappings. Upon application shutdown, it will drop the schema, removing all the data and tables created. This option is useful for development and testing environments where you want to start with a clean database each time.
#
#spring.jpa.hibernate.ddl-auto=update: This configuration tells Hibernate to automatically update the database schema if it already exists, based on the entity mappings. If the schema does not exist, it will create it. Hibernate compares the existing schema with the entity mappings and generates the necessary SQL statements to add, modify, or remove database objects (tables, columns, constraints, etc.) to match the entity definitions. However, it will not drop the schema or tables, preserving the existing data. This option is suitable for development environments where you want to evolve the database schema along with your application's entity changes.
#
#It's important to note that while these options are convenient for development and testing purposes, they are not recommended for production environments. In production, it's typically preferable to manage the database schema changes explicitly using database migration tools, as the automatic schema generation can have limitations and potential risks.
#
#Therefore, it's advisable to use appropriate database migration tools, such as Flyway or Liquibase, to manage and version the database schema changes in a controlled manner.