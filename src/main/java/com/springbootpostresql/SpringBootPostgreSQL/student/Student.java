package com.springbootpostresql.SpringBootPostgreSQL.student;

import jakarta.persistence.*;

import java.time.LocalDate;

@Entity//This one is for the Hibernate
@Table
public class Student {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;
    private String name;
    private String email;
    private LocalDate dob;
    private Integer age;


    //NoArgsConstructor
    public Student() {
    }

    //AllArgsConstructor
    public Student(long id,
                   String name,
                   String email,
                   LocalDate dob,
                   Integer age) {
        this.id = id;
        this.name = name;
        this.email = email;
        this.dob = dob;
        this.age = age;
    }

    //Constructor without ID (ID is auto generated by the DB)
    public Student(String name,
                   String email,
                   LocalDate dob,
                   Integer age) {
        this.name = name;
        this.email = email;
        this.dob = dob;
        this.age = age;
    }

    //Implement the Getter and Setters
    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public LocalDate getDob() {
        return dob;
    }

    public void setDob(LocalDate dob) {
        this.dob = dob;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }

    @Override
    public String toString() {
        return "Student{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", email='" + email + '\'' +
                ", dob=" + dob +
                ", age=" + age +
                '}';
    }
}//End of Student Class



//NOTES:

/*
The `toString()` method is a method provided by the `Object` class in Java, and it is meant to return a string representation of an object. When you override the `toString()` method in your class, you can define how you want the object to be represented as a string.

In the code snippet you provided, the `toString()` method is overridden in the `Student` class. It returns a string representation of a `Student` object with its attributes, such as `id`, `name`, `email`, `dob`, and `age`. By providing this implementation, you can conveniently obtain a meaningful string representation of a `Student` object.

The `toString()` method is commonly used for debugging and logging purposes. It allows you to quickly inspect the values of an object's attributes without explicitly accessing each attribute individually. For example, you can use it to print the details of a `Student` object to the console, log it to a file, or display it in a user interface.

By having a well-defined `toString()` method, you can improve the readability and usability of your code, especially when working with complex objects or debugging scenarios. Additionally, it's often recommended to override `toString()` when implementing your own classes to provide a human-readable and meaningful representation of the object's state.
==========================================================================

(Q)Use of this ;  @GeneratedValue(strategy = GenerationType.IDENTITY)

The @GeneratedValue annotation is used in JPA (Java Persistence API) to specify the generation strategy for automatically generating unique identifier values for entity objects.

In particular, the @GeneratedValue annotation is often used in combination with the @Id annotation to define the primary key field of an entity class.

The strategy attribute of the @GeneratedValue annotation specifies the strategy to be used for generating the identifier values. The GenerationType.IDENTITY strategy indicates that the database will automatically assign a unique identifier value when a new entity object is persisted.

Here's an example of how @GeneratedValue can be used:

@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private Long id;


In this example, the id field is marked as the primary key of the entity class. The @GeneratedValue annotation with GenerationType.IDENTITY indicates that the database will generate the unique identifier values for this field using an identity column.

By using this annotation, you delegate the responsibility of generating unique identifier values to the database, which can be useful in scenarios where you have an auto-incrementing primary key column in the database.


 */
